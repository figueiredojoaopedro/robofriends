{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","Card","properties","name","email","id","className","src","alt","CardList","robots","cardEnumeration","map","user","item","key","SearchBox","searchfield","searchChange","placeholder","type","onChange","App","event","console","log","target","value","setState","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+MAUeA,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCeJC,EAfF,SAACC,GACV,IAAOC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACI,yBAAKC,UAAU,oDACX,yBAAKA,UAAU,SACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,kBAExD,6BACI,4BAAKL,GACL,2BAAIC,MCMLK,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAkBD,EAAOE,KAAI,SAACC,EAAMC,GAEtC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAMT,GAAIK,EAAOI,GAAMT,GAAIF,KAAMO,EAAOI,GAAMX,KAAMC,MAAOM,EAAOI,GAAMV,WAG9F,OAGI,6BACKO,EADL,MCGOK,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKZ,UAAU,OACX,2BACAA,UAAU,mCACVa,YAAY,iBACZC,KAAK,SACLC,SAAUH,MCuCPI,E,kDA5CX,aAAc,IAAD,8BACT,gBAgBJJ,aAAe,SAACK,GACZC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAACX,YAAaM,EAAMG,OAAOC,SAjBzC,EAAKE,MAAQ,CACTnB,OAAQ,GACRO,YAAa,IAJR,E,qDAQb,WAAoB,IAAD,OAIfa,MAAM,8CACDC,MAAK,SAAAC,GAAW,OAAOA,EAASC,UAChCF,MAAK,SAAAG,GAAU,EAAKN,SAAS,CAAClB,OAAOwB,S,oBAQ9C,WAAS,IAAD,OACEC,EAAiBC,KAAKP,MAAMnB,OAAO2B,QAAO,SAAC3B,GAC7C,OAAOA,EAAOP,KAAKmC,cAAcC,SAAS,EAAKV,MAAMZ,YAAYqB,kBAErE,OAAiC,IAA7BF,KAAKP,MAAMnB,OAAO8B,OACX,wBAAIlC,UAAU,YAAd,cAIH,yBAAKA,UAAU,MACX,wBAAIA,UAAU,SAAd,gBACA,kBAAC,EAAD,CAAWY,aAAgBkB,KAAKlB,eAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUR,OAAUyB,U,GApC1BM,IAAMC,WCOTC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.6347dc3e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: \"scroll\", border: '5px solid black', height: \"800px\"}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","// the react technologie works with division of he stuff\r\n// so the page gonna got many cards and it's the most small container/atom we could have there\r\n// that's why we start creating a Card code, that can be reusable for other stuff, obviously, if it's needed\r\nimport React from 'react';\r\n\r\nconst Card = (properties) =>{\r\n    const {name, email, id} = properties\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <div className='image'>\r\n                <img src={`https://robohash.org/${id}?200x200`} alt='card picture'></img>\r\n            </div>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n// we would be using props as parameter, but the destructuing makes us able to use the robots word\r\nconst CardList = ({robots}) => {\r\n    // notice that i created a function to optimize the code, okay?\r\n    const cardEnumeration = robots.map((user, item) => {\r\n        // an important thing is that you need to put a key in each component, cuz the react need to know what this new dom element is, just to optimise the code, but nothing necessary to make it work.\r\n        return <Card key={item} id={robots[item].id} name={robots[item].name} email={robots[item].email}/>;\r\n    })\r\n    // now, by the syntax of js. to call that function, i need to type {myfunction} `BRACKETS` and everything will work correctly!\r\n    return (\r\n        // and banng, everythins is working fine, the problem is that idk if the images will be the same everytime we just reload the page.\r\n        // probably the same, cuz it works with reserved words\r\n        <div>\r\n            {cardEnumeration};  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\" \r\n            placeholder=\"Search Robots!\" \r\n            type='search' \r\n            onChange={searchChange}>\r\n            </input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport Scroll from \"../components/Scroll\";\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // what is happening here? so we just asked to fecth a json file at this address\r\n        // then, as the key words says, response return the json file in there, that the name is users\r\n        // so we attach users array of that json file into the robots state key word\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=>{return response.json();})\r\n            .then(users => {this.setState({robots:users});});\r\n    }\r\n\r\n    searchChange = (event) => {\r\n        console.log(event.target.value);\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter((robots) => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        if (this.state.robots.length === 0){\r\n            return <h1 className='white tc'>Loading...</h1>\r\n        }\r\n        else{\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='white'>Robofriends!</h1>\r\n                    <SearchBox searchChange = {this.searchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots = {filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n                );\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport \"tachyons\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}